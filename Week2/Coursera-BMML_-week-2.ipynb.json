{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Expectation-maximization algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this assignment, we will derive and implement formulas for Gaussian Mixture Model â€” one of the most commonly used methods for performing soft clustering of the data. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Installation\n",
    "\n",
    "We will need ```numpy```, ```scikit-learn```, ```matplotlib``` libraries for this assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy.linalg import slogdet, det, solve\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "from sklearn.datasets import load_digits\n",
    "from grader import Grader\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Grading\n",
    "We will create a grader instance below and use it to collect your answers. Note that these outputs will be stored locally inside grader and will be uploaded to the platform only after running submitting function in the last part of this assignment. If you want to make a partial submission, you can run that cell anytime you want."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grader = Grader()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Implementing EM for GMM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For debugging we will use samples from gaussian mixture model with unknown mean, variance and priors. We also added inital values of parameters for grading purposes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x108a522b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "samples = np.load('samples.npz')\n",
    "X = samples['data']\n",
    "pi0 = samples['pi0']\n",
    "mu0 = samples['mu0']\n",
    "sigma0 = samples['sigma0']\n",
    "plt.scatter(X[:, 0], X[:, 1], c='grey', s=30)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reminder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember, that EM algorithm is a coordinate descent optimization of variational lower bound $\\mathcal{L}(\\theta, q) = \\int q(T) \\log\\frac{P(X, T|\\theta)}{q(T)}dT\\to \\max$.\n",
    "\n",
    "<b>E-step</b>:<br>\n",
    "$\\mathcal{L}(\\theta, q) \\to \\max\\limits_{q} \\Leftrightarrow \\mathcal{KL} [q(T) \\,\\|\\, p(T|X, \\theta)] \\to \\min \\limits_{q\\in Q} \\Rightarrow q(T) = p(T|X, \\theta)$<br>\n",
    "<b>M-step</b>:<br> \n",
    "$\\mathcal{L}(\\theta, q) \\to \\max\\limits_{\\theta} \\Leftrightarrow \\mathbb{E}_{q(T)}\\log p(X,T | \\theta) \\to \\max\\limits_{\\theta}$\n",
    "\n",
    "For GMM, $\\theta$ is a set of parameters that consists of mean vectors $\\mu_c$, covariance matrices $\\Sigma_c$ and priors $\\pi_c$ for each component.\n",
    "\n",
    "Latent variables $T$ are indices of components to which each data point is assigned. $T_i$ (cluster index for object $i$) is a binary vector with only one active bit in position corresponding to the true component. For example, if we have $C=3$ components and object $i$ lies in first component, $T_i = [1, 0, 0]$.\n",
    "\n",
    "The joint distribution can be written as follows: $p(T, X \\mid \\theta) =  \\prod\\limits_{i=1}^N p(T_i, X_i \\mid \\theta) = \\prod\\limits_{i=1}^N \\prod\\limits_{c=1}^C [\\pi_c \\mathcal{N}(X_i \\mid \\mu_c, \\Sigma_c)]^{T_{ic}}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### E-step\n",
    "In this step we need to estimate the posterior distribution over the latent variables with fixed values of parameters: $q(T) = p(T|X, \\theta)$. We will assume that $T_i$ (cluster index for object $i$) is a binary vector with only one '1' in position corresponding to the true component. To do so we need to compute $\\gamma_{ic} = P(T_{ic} = 1 \\mid X, \\theta)$. Note that $\\sum\\limits_{c=1}^C\\gamma_{ic}=1$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Important trick 1:</b> It is important to avoid numerical errors. At some point you will have to compute the formula of the following form: $\\frac{e^{x_i}}{\\sum_j e^{x_j}}$. When you compute exponents of large numbers, you get huge numerical errors (some numbers will simply become infinity). You can avoid this by dividing numerator and denominator by $e^{\\max(x)}$: $\\frac{e^{x_i-\\max(x)}}{\\sum_j e^{x_j - \\max(x)}}$. After this transformation maximum value in the denominator will be equal to one. All other terms will contribute smaller values. This trick is called log-sum-exp. So, to compute desired formula you first subtract maximum value from each component in vector $X$ and then compute everything else as before.\n",
    "\n",
    "<b>Important trick 2:</b> You will probably need to compute formula of the form $A^{-1}x$ at some point. You would normally inverse $A$ and then multiply it by $x$. A bit faster and more numerically accurate way to do this is to solve the equation $Ay = x$. Its solution is $y=A^{-1}x$, but the equation $Ay = x$ can be solved by Gaussian elimination procedure. You can use ```np.linalg.solve``` for this.\n",
    "\n",
    "<b>Other usefull functions: </b> <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.slogdet.html\">```slogdet```</a> and <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.det.html#numpy.linalg.det\">```det```</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Task 1:</b> Implement E-step for GMM using template below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def pdf_multivariate_gauss(x, mu, cov):\n",
    "    '''\n",
    "    Caculate the multivariate normal density (pdf)\n",
    "\n",
    "    Keyword arguments:\n",
    "        x : numpy array of a \"d x 1\" sample vector\n",
    "        mu : numpy array of a \"d x 1\" mean vector\n",
    "        cov : \"numpy array of a d x d\" covariance matrix\n",
    "    '''\n",
    "    #assert(mu.shape[0] > mu.shape[1]), 'mu must be a row vector'\n",
    "    #assert(x.shape[0] > x.shape[1]), 'x must be a row vector'\n",
    "    #assert(cov.shape[0] == cov.shape[1]), 'covariance matrix must be square'\n",
    "    #assert(mu.shape[0] == cov.shape[0]), 'cov_mat and mu_vec must have the same dimensions'\n",
    "    #assert(mu.shape[0] == x.shape[0]), 'mu and x must have the same dimensions'\n",
    "    part1 = 1 / ( ((2* np.pi)**(len(mu)/2)) * (np.linalg.det(cov)**(1/2)) )\n",
    "    part2 = (-1/2) * ((x-mu).T.dot(np.linalg.inv(cov))).dot((x-mu))\n",
    "    return float(part1 * np.exp(part2))\n",
    "\n",
    "def softmax(x):\n",
    "    e_x = np.exp(x - np.max(x))\n",
    "    return e_x / e_x.sum()\n",
    "\n",
    "P = lambda mu, s: np.linalg.det(s) ** -.5 * (2 * np.pi) ** (-X.shape[1]/2.) \\\n",
    "                * np.exp(-.5 * np.einsum('ij, ij -> i',\\\n",
    "                        X - mu, np.dot(np.linalg.inv(s) , (X - mu).T).T ) ) \n",
    "\n",
    "def E_step(X, pi, mu, sigma):\n",
    "    \"\"\"\n",
    "    Performs E-step on GMM model\n",
    "    Each input is numpy array:\n",
    "    X: (N x d), data points\n",
    "    pi: (C), mixture component weights \n",
    "    mu: (C x d), mixture component means\n",
    "    sigma: (C x d x d), mixture component covariance matrices\n",
    "    \n",
    "    Returns:\n",
    "    gamma: (N x C), probabilities of clusters for objects\n",
    "    \"\"\"\n",
    "    N = X.shape[0] # number of objects\n",
    "    C = pi.shape[0] # number of clusters\n",
    "    d = mu.shape[1] # dimension of each object\n",
    "    gamma = np.zeros((N, C)) # distribution q(T)\n",
    "    ### YOUR CODE HERE\n",
    "    for cluster in range(C):\n",
    "        gamma[:, cluster] = pi[cluster] * PDF(mu[cluster], sigma[cluster])\n",
    "    \n",
    "    #gamma = softmax(gamma)\n",
    "    gamma = (gamma.T / np.sum(gamma, axis = 1)).T\n",
    "    #print(gamma)\n",
    "    return gamma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current answer for task Task 1 (E-step) is: 0.533717874108\n"
     ]
    }
   ],
   "source": [
    "gamma = E_step(X, pi0, mu0, sigma0)\n",
    "grader.submit_e_step(gamma)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### M-step\n",
    "\n",
    "In M-step we need to maximize $\\mathbb{E}_{q(T)}\\log p(X,T | \\theta)$ with respect to $\\theta$. In our model this means that we need to find optimal values of $\\pi$, $\\mu$, $\\Sigma$. To do so, you need to compute the derivatives and \n",
    "set them to zero. You should start by deriving formulas for $\\mu$ as it is the easiest part. Then move on to $\\Sigma$. Here it is crucial to optimize function w.r.t. to $\\Lambda = \\Sigma^{-1}$ and then inverse obtained result. Finaly, to compute $\\pi$, you will need <a href=\"https://www3.nd.edu/~jstiver/FIN360/Constrained%20Optimization.pdf\">Lagrange Multipliers technique</a> to satisfy constraint $\\sum\\limits_{i=1}^{n}\\pi_i = 1$.\n",
    "\n",
    "<br>\n",
    "<b>Important note:</b> You will need to compute derivatives of scalars with respect to matrices. To refresh this technique from previous courses, see <a href=\"https://en.wikipedia.org/wiki/Matrix_calculus\"> wiki article</a> about it . Main formulas of matrix derivatives can be found in <a href=\"http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3274/pdf/imm3274.pdf\">Chapter 2 of The Matrix Cookbook</a>. For example, there you may find that $\\frac{\\partial}{\\partial A}\\log |A| = A^{-T}$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Task 2:</b> Implement M-step for GMM using template below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def M_step(X, gamma):\n",
    "    \"\"\"\n",
    "    Performs M-step on GMM model\n",
    "    Each input is numpy array:\n",
    "    X: (N x d), data points\n",
    "    gamma: (N x C), distribution q(T)  \n",
    "    \n",
    "    Returns:\n",
    "    pi: (C)\n",
    "    mu: (C x d)\n",
    "    sigma: (C x d x d)\n",
    "    \"\"\"\n",
    "    N = X.shape[0] # number of objects\n",
    "    C = gamma.shape[1] # number of clusters\n",
    "    d = X.shape[1] # dimension of each object\n",
    "    pi = np.zeros((C))\n",
    "    mu = np.zeros((C, d))\n",
    "    sigma = np.zeros((C, d,d))\n",
    "    ### YOUR CODE HERE\n",
    "    for cluster in range(C):\n",
    "        norm_qt = np.sum(gamma[:,cluster])\n",
    "        mu[cluster] = (np.dot(X.T, gamma[:,cluster]) / norm_qt).T\n",
    "        pi[cluster] = norm_qt / N\n",
    "        x_mu = np.matrix(X - mu[cluster])\n",
    "        sigma[cluster] = np.array(1. / norm_qt * np.dot(np.multiply(x_mu.T, gamma[:,cluster]), x_mu)) \n",
    "        if np.linalg.det(sigma[cluster]) == 0:\n",
    "            print('Error')\n",
    "    return pi, mu, sigma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current answer for task Task 2 (M-step: mu) is: 2.89939188205\n",
      "Current answer for task Task 2 (M-step: sigma) is: 5.9771052169\n",
      "Current answer for task Task 2 (M-step: pi) is: 0.550762445922\n"
     ]
    }
   ],
   "source": [
    "gamma = E_step(X, pi0, mu0, sigma0)\n",
    "pi, mu, sigma = M_step(X, gamma)\n",
    "grader.submit_m_step(pi, mu, sigma)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loss function"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we need some function to track convergence. We will use variational lower bound $\\mathcal{L}$ for this purpose. We will stop our EM iterations when $\\mathcal{L}$ will saturate. Usually, you will need only about 10-20 iterations to converge. It is also useful to check that this function never decreases during training. If it does, you have a bug in your code.\n",
    "\n",
    "<b>Task 3:</b> Implement a function that will compute $\\mathcal{L}$ using template below.\n",
    "\n",
    "$$\\mathcal{L} = \\sum_{n=1}^{N} \\sum_{k=1}^{K} \\mathbb{E}[z_{n, k}] (\\log \\pi_k + \\log \\mathcal{N}(x_n | \\mu_k, \\sigma_k)) - \\sum_{n=1}^{N} \\sum_{k=1}^{K} \\mathbb{E}[z_{n, k}] \\log \\mathbb{E}[z_{n, k}]$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def compute_vlb(X, pi, mu, sigma, gamma):\n",
    "    \"\"\"\n",
    "    Each input is numpy array:\n",
    "    X: (N x d), data points\n",
    "    gamma: (N x C), distribution q(T)  \n",
    "    pi: (C)\n",
    "    mu: (C x d)\n",
    "    sigma: (C x d x d)\n",
    "    \n",
    "    Returns value of variational lower bound\n",
    "    \"\"\"\n",
    "    N = X.shape[0] # number of objects\n",
    "    C = gamma.shape[1] # number of clusters\n",
    "    d = X.shape[1] # dimension of each object\n",
    "    \n",
    "    loss = 0\n",
    "    for i in range(N):\n",
    "        for j in range(C):\n",
    "            part1 = 1 / ( ((2* np.pi)**(len(mu[j])/2)) * (np.linalg.det(sigma[j])**(0.5)) )\n",
    "            part2 = (-1/2) * ((X[i]-mu[j]).T.dot(np.linalg.inv(sigma[j]))).dot((X[i]-mu[j]))\n",
    "            loss += gamma[i, j] * (np.log(part1) + part2 + np.log(pi[j]))\n",
    "            loss -= gamma[i, j] * np.log(gamma[i, j])\n",
    "\n",
    "    return loss\n",
    "#     for cluster in range(C):\n",
    "#         loss += np.dot(gamma[:, cluster].T , np.log(PDF(mu[cluster], sigma[cluster]) * pi[cluster]))\n",
    "#         loss -= np.dot(gamma[:, cluster].T , np.log(gamma[:, cluster]))\n",
    "#     return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current answer for task Task 3 (VLB) is: -1213.97346431\n"
     ]
    }
   ],
   "source": [
    "pi, mu, sigma = pi0, mu0, sigma0\n",
    "gamma = E_step(X, pi, mu, sigma)\n",
    "pi, mu, sigma = M_step(X, gamma)\n",
    "loss = compute_vlb(X, pi, mu, sigma, gamma)\n",
    "grader.submit_VLB(loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bringing it all together"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have E step, M step and VLB, we can implement training loop. We will start at random values of $\\pi$, $\\mu$ and $\\Sigma$, train until $\\mathcal{L}$ stops changing and return the resulting points. We also know that EM algorithm sometimes stops at local optima. To avoid this we should restart algorithm multiple times from different starting positions. Each training trial should stop either when maximum number of iterations is reached or when relative improvement is smaller than given tolerance ($|\\frac{\\mathcal{L}_i-\\mathcal{L}_{i-1}}{\\mathcal{L}_{i-1}}| \\le \\text{rtol}$).\n",
    "\n",
    "Remember, that values of $\\pi$ that you generate must be non-negative and sum up to 1. Also, $\\Sigma$ matrices must be symmetric and positive semi-definite. If you don't know how to generate those matrices, you can use $\\Sigma=I$ as initialization.\n",
    "\n",
    "You will also sometimes get numerical errors because of component collapsing. The easiest way to deal with this problems is to simply restart the procedure.\n",
    "\n",
    "<b>Task 4:</b> Implement training procedure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 494,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def train_EM(X, C, rtol=1e-3, max_iter=100, restarts=2):\n",
    "    '''\n",
    "    Starts with random initialization *restarts* times\n",
    "    Runs optimization until saturation with *rtol* reached\n",
    "    or *max_iter* iterations were made.\n",
    "    \n",
    "    X: (N, d), data points\n",
    "    C: int, number of clusters\n",
    "    '''\n",
    "    N = X.shape[0] # number of objects\n",
    "    d = X.shape[1] # dimension of each object\n",
    "    #C = gamma.shape[1] # number of clusters\n",
    "    \n",
    "    best_loss = 2 ** 60\n",
    "    best_pi = None\n",
    "    best_mu = None\n",
    "    best_sigma = None\n",
    "    for _ in range(restarts):\n",
    "        try:\n",
    "            ### YOUR CODE HERE\n",
    "            mu = np.array(X[np.random.choice(N, C, False), :])\n",
    "            sigma= [np.eye(d)] * C\n",
    "            pi = np.array([1./C] * C)\n",
    "            loss = -2 ** 30\n",
    "            for iteration in range(max_iter):\n",
    "                gamma = E_step(X, pi, mu, sigma)\n",
    "                pi, mu, sigma = M_step(X, gamma)\n",
    "                prevloss = loss\n",
    "                loss = compute_vlb(X, pi, mu, sigma, gamma)\n",
    "                #print (loss)\n",
    "                if abs((loss - prevloss) / prevloss) <= rtol:\n",
    "                    break\n",
    "            if best_loss > loss:\n",
    "                best_loss = loss\n",
    "                best_pi = pi\n",
    "                best_mu = mu\n",
    "                best_sigma = sigma\n",
    "            \n",
    "        except np.linalg.LinAlgError:\n",
    "            print(\"Singular matrix: components collapsed\")\n",
    "            pass\n",
    "\n",
    "    return best_loss, best_pi, best_mu, best_sigma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 495,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current answer for task Task 4 (EM) is: -1064.00467983\n"
     ]
    }
   ],
   "source": [
    "best_loss, best_pi, best_mu, best_sigma = train_EM(X, 3)\n",
    "grader.submit_EM(best_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you implemented all the steps correctly, your algorithm should converge in about 20 iterations. Let's plot the clusters to see it. We will assign a cluster label as the most probable cluster index. This can be found using matrix $\\gamma$ computed on last E-step. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 496,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x108de0048>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gamma = E_step(X, best_pi, best_mu, best_sigma)\n",
    "labels = gamma.argmax(1)\n",
    "plt.scatter(X[:, 0], X[:, 1], c=labels, s=30)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Authorization & Submission\n",
    "To submit assignment parts to Cousera platform, please, enter your e-mail and your token into variables below. You can generate the token on this programming assignment page. <b>Note:</b> Token expires 30 minutes after generation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 497,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You want to submit these numbers:\n",
      "Task Task 1 (E-step): 0.533717874108\n",
      "Task Task 2 (M-step: mu): 2.89939188205\n",
      "Task Task 2 (M-step: sigma): 5.9771052169\n",
      "Task Task 2 (M-step: pi): 0.550762445922\n",
      "Task Task 3 (VLB): -1213.97346431\n",
      "Task Task 4 (EM): -1064.00467983\n"
     ]
    }
   ],
   "source": [
    "STUDENT_EMAIL = \"cs13b1030@iith.ac.in\"\n",
    "STUDENT_TOKEN = \"DG1Rn4vfilSQcADE\"\n",
    "grader.status()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to submit these answers, run cell below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 498,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Submitted to Coursera platform. See results on assignment page!\n"
     ]
    }
   ],
   "source": [
    "grader.submit(STUDENT_EMAIL, STUDENT_TOKEN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.3451814   0.6066179   0.04820071]\n",
      "[ 0.10958869  0.33837472  0.55203658]\n"
     ]
    }
   ],
   "source": [
    "print(pi0)\n",
    "print(best_pi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-0.71336192  0.90635089]\n",
      " [ 0.76623673  0.82605407]\n",
      " [-1.32368279 -1.75244452]]\n",
      "[[ 6.22320651  4.37594285]\n",
      " [ 0.90743974  0.9521255 ]\n",
      " [ 1.22314076  5.82497835]]\n"
     ]
    }
   ],
   "source": [
    "print(mu0)\n",
    "print(best_mu)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ 1.00490413  1.89980228]\n",
      "  [ 1.89980228  4.18354574]]\n",
      "\n",
      " [[ 1.96867815  0.78415336]\n",
      "  [ 0.78415336  1.83319942]]\n",
      "\n",
      " [[ 0.19316335 -0.11648642]\n",
      "  [-0.11648642  1.98395967]]]\n"
     ]
    }
   ],
   "source": [
    "print(sigma0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  },
  "latex_envs": {
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 0
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
